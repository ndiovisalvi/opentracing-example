apiVersion: v1
kind: Template
metadata:
  name: spring-boot-tracing-template
annotations:
    description: "A SpringBoot microservice which sends distributed traces to a side car Jaeger Agent"
    tags: "tracing,distributed" # TODO : Refer to the id and categoryAliases in CATALOG_CATEGORIES in the consoleâ€™s constants file.
# Parameters
parameters:
- name: OPENTRACING_JAEGER_UDP_SENDER_HOST
  description: The host where the Jaeger Agent is running
  value: localhost
  required: true
- name: OPENTRACING_JAEGER_UDP_SENDER_PORT
  description: The port where the Jaeger Agent is running
  value: '6831'
  required: true
- name: JAEGER_COLLECTOR_URL
  description: The URL addresss of the Jaeger Collector where traces are send by the Jaeger Agent
  value: jaeger-collector.tracing.svc:14267
  required: true
- name: SOURCE_REPOSITORY_URL
  description: The source URL for the application
  displayName: Source URL
  required: true
- name: SOURCE_REPOSITORY_REF
  description: The branch name for the application
  displayName: Source Branch
  value: master
  required: true
- name: SOURCE_REPOSITORY_DIR
  description: The location within the source repo of the application
  displayName: Source Directory
  value: .
  required: true
- name: ARTIFACT_COPY_ARGS
  description: Syntax to be used to copy uberjar files to the target directory
  displayName: Copy Args
  value: '*-exec.jar'
  required: true
- name: GITHUB_WEBHOOK_SECRET
  description: A secret string used to configure the GitHub webhook.
  displayName: GitHub Webhook Secret
  required: true
  from: '[a-zA-Z0-9]{40}'
  generate: expression
- name: MAVEN_MIRROR_URL
  description: Maven Nexus Repository to be used during build phase
  displayName:
  required: false
# Objects defined for the template
objects:
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: spring-boot-tracing
      group: dev.snowdrop.example
      version: 1.0-SNAPSHOT
    name: spring-boot-tracing
  spec:
    ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: spring-boot-tracing
      group: dev.snowdrop.example
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: spring-boot-tracing
      group: dev.snowdrop.example
      version: 1.0-SNAPSHOT
    name: spring-boot-tracing
  spec:
    port:
      targetPort: 8080
    to:
      kind: Service
      name: spring-boot-tracing
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: spring-boot-tracing
      group: dev.snowdrop.example
      version: 1.0-SNAPSHOT
    name: spring-boot-tracing
  spec:
    replicas: 1
    selector:
      app: spring-boot-tracing
      group: dev.snowdrop.example
      version: 1.0-SNAPSHOT
    strategy:
      rollingParams:
        timeoutSeconds: 3600
      type: Rolling
    template:
      metadata:
        labels:
          app: spring-boot-tracing
          group: dev.snowdrop.example
          version: 1.0-SNAPSHOT
      spec:
        containers:
        - env:
          - name: KUBERNETES_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: OPENTRACING_JAEGER_UDP_SENDER_HOST
            value: ${OPENTRACING_JAEGER_UDP_SENDER_HOST}
          - name: OPENTRACING_JAEGER_UDP_SENDER_PORT
            value: ${OPENTRACING_JAEGER_UDP_SENDER_PORT}
          image: spring-boot-tracing:latest
          imagePullPolicy: IfNotPresent
          name: spring-boot
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          - containerPort: 8778
            name: jolokia
            protocol: TCP
          securityContext:
            privileged: false
        - command:
          - /go/bin/agent-linux
          - --collector.host-port=${JAEGER_COLLECTOR_URL}
          image: jaegertracing/jaeger-agent
          imagePullPolicy: Always
          name: jaeger-agent
          ports:
          - containerPort: 5775
            protocol: UDP
          - containerPort: 5778
            protocol: TCP
          - containerPort: 6831
            name: ambit-lm
            protocol: UDP
          - containerPort: 6832
            protocol: UDP
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - spring-boot
        from:
          kind: ImageStreamTag
          name: spring-boot-tracing:latest
      type: ImageChange
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: spring-boot-tracing-s2i
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: spring-boot-tracing:latest
    postCommit: {}
    resources: {}
    source:
      git:
        uri: ${SOURCE_REPOSITORY_URL}
        ref: ${SOURCE_REPOSITORY_REF}
      type: Git
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: runtime:latest
        incremental: true
        env:
        - name: MAVEN_ARGS_APPEND
          value: "-pl ${SOURCE_REPOSITORY_DIR}"
        - name: ARTIFACT_DIR
          value: "${SOURCE_REPOSITORY_DIR}/target"
        - name: MAVEN_MIRROR_URL
          value: "${MAVEN_MIRROR_URL}"
        - name: ARTIFACT_COPY_ARGS
          value: "${ARTIFACT_COPY_ARGS}"
      type: Source
    triggers:
    - github:
        secret: ${GITHUB_WEBHOOK_SECRET}
      type: GitHub
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: spring-boot-tracing
  spec: {}
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: runtime
  spec:
    tags:
    - name: latest
      from:
        kind: DockerImage
        name: registry.access.redhat.com/redhat-openjdk-18/openjdk18-openshift
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: jaeger-agent
  spec:
    tags:
    - name: latest
      from:
        kind: DockerImage
        name: jaegertracing/jaeger-agent
